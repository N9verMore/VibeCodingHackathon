import logging
from typing import List
from datetime import datetime
from pdmodule.models import ProcessedReview

logger = logging.getLogger(__name__)


class MockDeliveryService:
    """
    Mock —Å–µ—Ä–≤—ñ—Å –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤
    –ó–∞–º—ñ—Å—Ç—å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ - –≤–∏–≤–æ–¥–∏—Ç—å –∫—Ä–∞—Å–∏–≤–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
    """

    def __init__(self, endpoint: str = "mock"):
        self.endpoint = endpoint
        self.delivered_reviews = []  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å—ñ "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ñ" –≤—ñ–¥–≥—É–∫–∏
        logger.info(f"MockDeliveryService initialized (TEST MODE)")

    async def deliver_processed_reviews(self, reviews: List[ProcessedReview]) -> bool:
        """
        "–î–æ—Å—Ç–∞–≤–ª—è—î" –æ–±—Ä–æ–±–ª–µ–Ω—ñ –≤—ñ–¥–≥—É–∫–∏ (–≤–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å)

        Args:
            reviews: –°–ø–∏—Å–æ–∫ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤

        Returns:
            bool: True –∑–∞–≤–∂–¥–∏ (mock)
        """
        logger.info(f"\n{'=' * 80}")
        logger.info(f"üì¶ MOCK DELIVERY - –û–±—Ä–æ–±–ª–µ–Ω—ñ –≤—ñ–¥–≥—É–∫–∏ ({len(reviews)} —à—Ç.)")
        logger.info(f"{'=' * 80}\n")

        for idx, review in enumerate(reviews, 1):
            self._print_review(idx, review)
            self.delivered_reviews.append(review)

        logger.info(f"{'=' * 80}")
        logger.info(f"‚úÖ Mock delivery completed: {len(reviews)} reviews")
        logger.info(f"{'=' * 80}\n")

        return True

    def _print_review(self, idx: int, review: ProcessedReview):
        """
        –í–∏–≤–æ–¥–∏—Ç—å –æ–¥–∏–Ω –≤—ñ–¥–≥—É–∫ —É –∑—Ä—É—á–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
        """
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –µ–º–æ–¥–∑—ñ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ—é
        sentiment_emoji = {
            "–ø–æ–∑–∏—Ç–∏–≤–Ω–∏–π": "üòä",
            "–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏–π": "üòû",
            "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π": "üòê"
        }

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –µ–º–æ–¥–∑—ñ –¥–ª—è –¥–∂–µ—Ä–µ–ª–∞
        source_emoji = {
            "appstore": "üçé",
            "googleplay": "ü§ñ",
            "trustpilot": "‚≠ê"
        }

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ –µ–º–æ–¥–∑—ñ –¥–ª—è severity
        severity_emoji = {
            "low": "üü¢",
            "medium": "üü°",
            "high": "üü†",
            "critical": "üî¥"
        }

        # –ö–æ–ª—å–æ—Ä–æ–≤—ñ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∏ —Ä–µ–π—Ç–∏–Ω–≥—É
        rating_stars = "‚≠ê" * review.rating + "‚òÜ" * (5 - review.rating)

        logger.info(f"\n‚îå‚îÄ –í—ñ–¥–≥—É–∫ #{idx} ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        logger.info(f"‚îÇ")
        logger.info(f"‚îÇ üÜî ID: {review.id}")
        logger.info(f"‚îÇ {source_emoji.get(review.source.value, 'üì±')} –î–∂–µ—Ä–µ–ª–æ: {review.source.value.upper()}")
        logger.info(f"‚îÇ üîó –ü–æ—Å–∏–ª–∞–Ω–Ω—è: {review.backlink}")
        logger.info(f"‚îÇ üìÖ –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: {review.created_at.strftime('%Y-%m-%d %H:%M:%S')}")
        logger.info(f"‚îÇ")
        logger.info(f"‚îÇ {rating_stars} –†–µ–π—Ç–∏–Ω–≥: {review.rating}/5")
        logger.info(f"‚îÇ")
        logger.info(f"‚îÇ üìù –¢–µ–∫—Å—Ç –≤—ñ–¥–≥—É–∫—É:")
        logger.info(f"‚îÇ    {self._wrap_text(review.text or '–ë–µ–∑ —Ç–µ–∫—Å—Ç—É', 70)}")
        logger.info(f"‚îÇ")
        logger.info(f"‚îÇ ‚îÄ‚îÄ‚îÄ ü§ñ –ê–ù–ê–õ–Ü–ó LLM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
        logger.info(f"‚îÇ")
        logger.info(f"‚îÇ {sentiment_emoji.get(review.sentiment.value, '‚ùì')} –ù–∞—Å—Ç—Ä—ñ–π: {review.sentiment.value.upper()}")
        logger.info(f"‚îÇ")
        logger.info(f"‚îÇ üè∑Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó: {', '.join(review.categories)}")
        logger.info(f"‚îÇ")
        logger.info(f"‚îÇ {severity_emoji.get(review.severity.value, '‚ö™')} –ö—Ä–∏—Ç–∏—á–Ω—ñ—Å—Ç—å: {review.severity.value.upper()}")
        logger.info(f"‚îÇ")
        logger.info(f"‚îÇ üí≠ –û–ø–∏—Å –≤—ñ–¥ LLM:")
        logger.info(f"‚îÇ    {self._wrap_text(review.description, 70)}")
        logger.info(f"‚îÇ")
        logger.info(f"‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n")

    def _wrap_text(self, text: str, width: int) -> str:
        """
        –ü–µ—Ä–µ–Ω–æ—Å–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –Ω–æ–≤–∏–π —Ä—è–¥–æ–∫ –∑ –≤—ñ–¥—Å—Ç—É–ø–∞–º–∏
        """
        if not text:
            return ""

        words = text.split()
        lines = []
        current_line = []
        current_length = 0

        for word in words:
            if current_length + len(word) + 1 <= width:
                current_line.append(word)
                current_length += len(word) + 1
            else:
                lines.append(" ".join(current_line))
                current_line = [word]
                current_length = len(word)

        if current_line:
            lines.append(" ".join(current_line))

        return "\n‚îÇ    ".join(lines)

    def get_stats(self) -> dict:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤
        """
        if not self.delivered_reviews:
            return {
                "total_delivered": 0,
                "message": "No reviews delivered yet"
            }

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ—é
        sentiment_stats = {}
        for review in self.delivered_reviews:
            sentiment = review.sentiment.value
            sentiment_stats[sentiment] = sentiment_stats.get(sentiment, 0) + 1

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∂–µ—Ä–µ–ª–∞—Ö
        source_stats = {}
        for review in self.delivered_reviews:
            source = review.source.value
            source_stats[source] = source_stats.get(source, 0) + 1

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        category_stats = {}
        for review in self.delivered_reviews:
            for category in review.categories:  # –¢–µ–ø–µ—Ä –º–∞—Å–∏–≤
                category_stats[category] = category_stats.get(category, 0) + 1

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ severity
        severity_stats = {}
        for review in self.delivered_reviews:
            severity = review.severity.value
            severity_stats[severity] = severity_stats.get(severity, 0) + 1

        # –°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥
        avg_rating = sum(r.rating for r in self.delivered_reviews) / len(self.delivered_reviews)

        return {
            "total_delivered": len(self.delivered_reviews),
            "average_rating": round(avg_rating, 2),
            "sentiment_distribution": sentiment_stats,
            "source_distribution": source_stats,
            "category_distribution": category_stats,
            "severity_distribution": severity_stats,
            "delivered_ids": [r.id for r in self.delivered_reviews]
        }

    def get_all_delivered(self) -> List[dict]:
        """
        –ü–æ–≤–µ—Ä—Ç–∞—î –≤—Å—ñ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ñ –≤—ñ–¥–≥—É–∫–∏ —É –≤–∏–≥–ª—è–¥—ñ —Å–ø–∏—Å–∫—É —Å–ª–æ–≤–Ω–∏–∫—ñ–≤
        """
        return [review.model_dump(mode='json') for review in self.delivered_reviews]

    def reset(self):
        """
        –û—á–∏—â–∞—î —ñ—Å—Ç–æ—Ä—ñ—é –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤
        """
        self.delivered_reviews.clear()
        logger.info("Mock delivery history cleared")