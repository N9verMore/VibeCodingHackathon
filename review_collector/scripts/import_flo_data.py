#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ flo_db_format.json –≤ DynamoDB —Ç–∞–±–ª–∏—Ü—é ReviewsTableV2
"""

import json
import os
import sys
from pathlib import Path
import boto3
from botocore.exceptions import ClientError
from datetime import datetime

# –î–æ–¥–∞—î–º–æ —à–ª—è—Ö –¥–æ shared –º–æ–¥—É–ª—ñ–≤
sys.path.insert(0, str(Path(__file__).parent.parent / 'src'))

def load_json_data(json_file_path: str) -> list:
    """–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∑ JSON —Ñ–∞–π–ª—É"""
    with open(json_file_path, 'r', encoding='utf-8') as f:
        return json.load(f)

def import_to_dynamodb(data: list, table_name: str = 'ReviewsTableV2', region: str = 'us-east-1', profile: str = None):
    """
    –Ü–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ –≤ DynamoDB —Ç–∞–±–ª–∏—Ü—é
    
    Args:
        data: –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É
        table_name: –ù–∞–∑–≤–∞ DynamoDB —Ç–∞–±–ª–∏—Ü—ñ
        region: AWS —Ä–µ–≥—ñ–æ–Ω
        profile: AWS –ø—Ä–æ—Ñ—ñ–ª—å
    """
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è DynamoDB –∫–ª—ñ—î–Ω—Ç–∞
    session = boto3.Session(profile_name=profile) if profile else boto3.Session()
    dynamodb = session.resource('dynamodb', region_name=region)
    table = dynamodb.Table(table_name)
    
    stats = {
        'total': len(data),
        'success': 0,
        'skipped': 0,
        'errors': 0
    }
    
    print(f"–ü–æ—á–∞—Ç–æ–∫ —ñ–º–ø–æ—Ä—Ç—É {stats['total']} –∑–∞–ø–∏—Å—ñ–≤ –≤ —Ç–∞–±–ª–∏—Ü—é {table_name}...")
    print(f"–†–µ–≥—ñ–æ–Ω: {region}")
    print("-" * 80)
    
    for idx, item in enumerate(data, 1):
        try:
            pk = item.get('pk')
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —ñ—Å–Ω—É—î –∑–∞–ø–∏—Å
            try:
                response = table.get_item(Key={'pk': pk})
                if 'Item' in response:
                    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ content_hash –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —á–∏ –∑–º—ñ–Ω–∏–ª–∏—Å—è –¥–∞–Ω—ñ
                    existing_hash = response['Item'].get('content_hash')
                    new_hash = item.get('content_hash')
                    
                    if existing_hash == new_hash:
                        print(f"[{idx}/{stats['total']}] –ü–†–û–ü–£–©–ï–ù–û: {pk} (–Ω–µ–∑–º—ñ–Ω–µ–Ω–∏–π)")
                        stats['skipped'] += 1
                        continue
                    else:
                        print(f"[{idx}/{stats['total']}] –û–ù–û–í–õ–ï–ù–ù–Ø: {pk} (content_hash –∑–º—ñ–Ω–∏–≤—Å—è)")
            except ClientError as e:
                if e.response['Error']['Code'] != 'ResourceNotFoundException':
                    raise
            
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø–∏—Å—É –¥–ª—è DynamoDB
            # –í—Å—ñ –¥–∞–Ω—ñ –∑ JSON –≤–∂–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
            dynamodb_item = item.copy()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ None –≤ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏ –¥–ª—è –ø–æ–ª—ñ–≤, —è–∫—ñ –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ null
            for field in ['title', 'country', 'author_hint']:
                if dynamodb_item.get(field) is None:
                    dynamodb_item[field] = ''
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ rating –≤ number —è–∫—â–æ –≤—ñ–Ω —î
            if dynamodb_item.get('rating') is not None:
                dynamodb_item['rating'] = int(dynamodb_item['rating']) if dynamodb_item['rating'] else 0
            else:
                dynamodb_item['rating'] = 0
            
            # –ó–∞–ø–∏—Å—É—î–º–æ –≤ —Ç–∞–±–ª–∏—Ü—é
            table.put_item(Item=dynamodb_item)
            
            brand = item.get('brand', 'N/A')
            source = item.get('source', 'N/A')
            print(f"[{idx}/{stats['total']}] ‚úì –ó–ê–ü–ò–°–ê–ù–û: {pk} (brand: {brand}, source: {source})")
            stats['success'] += 1
            
        except Exception as e:
            print(f"[{idx}/{stats['total']}] ‚úó –ü–û–ú–ò–õ–ö–ê: {pk} - {str(e)}")
            stats['errors'] += 1
            continue
    
    # –í–∏–≤–æ–¥–∏–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("-" * 80)
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò –Ü–ú–ü–û–†–¢–£:")
    print(f"  –í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤:      {stats['total']}")
    print(f"  ‚úì –£—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ:  {stats['success']}")
    print(f"  ‚äù –ü—Ä–æ–ø—É—â–µ–Ω–æ:         {stats['skipped']}")
    print(f"  ‚úó –ü–æ–º–∏–ª–æ–∫:           {stats['errors']}")
    print("-" * 80)
    
    return stats

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    # –®–ª—è—Ö –¥–æ JSON —Ñ–∞–π–ª—É
    json_file = Path(__file__).parent.parent / 'flo_db_format.json'
    
    if not json_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {json_file}")
        sys.exit(1)
    
    print("=" * 80)
    print("  –Ü–ú–ü–û–†–¢ –î–ê–ù–ò–• FLO –í DYNAMODB")
    print("=" * 80)
    print(f"\n–§–∞–π–ª –¥–∞–Ω–∏—Ö: {json_file}")
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏)
    table_name = os.environ.get('TABLE_NAME', 'ReviewsTableV2')
    region = os.environ.get('AWS_REGION', 'us-east-1')
    profile = os.environ.get('AWS_PROFILE', 'hackathon')
    
    print(f"–¢–∞–±–ª–∏—Ü—è: {table_name}")
    print(f"–†–µ–≥—ñ–æ–Ω: {region}")
    print(f"–ü—Ä–æ—Ñ—ñ–ª—å: {profile}")
    
    # –ó–∞–ø–∏—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    response = input("\n‚ö†Ô∏è  –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ —ñ–º–ø–æ—Ä—Ç? (yes/no): ")
    if response.lower() not in ['yes', 'y']:
        print("–Ü–º–ø–æ—Ä—Ç —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
        sys.exit(0)
    
    print()
    
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
    try:
        data = load_json_data(json_file)
        print(f"‚úì –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å—ñ–≤ –∑ JSON —Ñ–∞–π–ª—É\n")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è JSON: {e}")
        sys.exit(1)
    
    # –Ü–º–ø–æ—Ä—Ç –≤ DynamoDB
    try:
        stats = import_to_dynamodb(data, table_name, region, profile)
        
        if stats['errors'] > 0:
            print("\n‚ö†Ô∏è  –Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑ –ø–æ–º–∏–ª–∫–∞–º–∏")
            sys.exit(1)
        else:
            print("\n‚úì –Ü–º–ø–æ—Ä—Ç —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            sys.exit(0)
            
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()

