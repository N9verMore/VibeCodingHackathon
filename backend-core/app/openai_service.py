from openai import OpenAI
from app.config import settings
from typing import List, Dict
from app.models import ResponseTone, ResponseDraft
import json
import logging

logger = logging.getLogger(__name__)


class OpenAIService:
    def __init__(self):
        self.client = OpenAI(api_key=settings.OPENAI_API_KEY)
    
    def generate_response_drafts(
        self, 
        comment: str,
        brand_name: str,
        context: str,
        tones: List[ResponseTone],
        tone_adjustment: float = 0.5
    ) -> List[ResponseDraft]:
        """–ì–µ–Ω–µ—Ä—É—î —á–µ—Ä–Ω–µ—Ç–∫–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π —É —Ä—ñ–∑–Ω–∏—Ö —Å—Ç–∏–ª—è—Ö"""
        
        tone_descriptions = {
            ResponseTone.OFFICIAL: "–û—Ñ—ñ—Ü—ñ–π–Ω–∏–π, –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π, —Ñ–æ—Ä–º–∞–ª—å–Ω–∏–π. –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ '–í–∏', –±–µ–∑ –µ–º–æ–¥–∂—ñ.",
            ResponseTone.FRIENDLY: "–î—Ä—É–∂–Ω—ñ–π, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–∏–π, –µ–º–ø–∞—Ç—ñ–π–Ω–∏–π. –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ '—Ç–∏', –µ–º–æ–¥–∂—ñ.",
            ResponseTone.TECH_SUPPORT: "–¢–µ—Ö–Ω—ñ—á–Ω–∏–π, –¥–µ—Ç–∞–ª—å–Ω–∏–π, –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ –∫—Ä–æ–∫–∞–º–∏ —Ä–æ–∑–≤'—è–∑–∞–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–∏."
        }
        
        tone_names = {
            ResponseTone.OFFICIAL: "official",
            ResponseTone.FRIENDLY: "friendly",
            ResponseTone.TECH_SUPPORT: "tech_support"
        }
        
        system_prompt = f"""–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ customer support –¥–ª—è –±—Ä–µ–Ω–¥—É {brand_name}.
–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è - –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≤—ñ–¥–≥—É–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.

–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ –±—Ä–µ–Ω–¥:
{context}

Tone adjustment: {tone_adjustment} (0=–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –æ—ñ—Ü—ñ–π–Ω–∏–π, 1=–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥—Ä—É–∂–Ω—ñ–π)

–î–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å—Ç–∏–ª—é –∑–≥–µ–Ω–µ—Ä—É–π:
1. –¢–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (—è–∫ –∂–∏–≤–∞ –ª—é–¥–∏–Ω–∞, –Ω–µ —Ä–æ–±–æ—Ç!)
2. Action items (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –¥—ñ—ó: refund, escalate, send_link, investigate, etc.)
3. –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é!
–í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –ø—Ä–∏—Ä–æ–¥–Ω–æ—é, –µ–º–ø–∞—Ç—ñ–π–Ω–æ—é —ñ –∫–æ—Ä–∏—Å–Ω–æ—é.
–ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —à–∞–±–ª–æ–Ω–Ω—ñ —Ñ—Ä–∞–∑–∏!"""

        # –§–æ—Ä–º—É—î–º–æ –æ–ø–∏—Å —Å—Ç–∏–ª—ñ–≤
        tones_text = "\n".join([
            f"- **{tone_names[tone]}**: {tone_descriptions[tone]}"
            for tone in tones
        ])

        user_prompt = f"""–í—ñ–¥–≥—É–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
\"\"\"
{comment}
\"\"\"

–ó–≥–µ–Ω–µ—Ä—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É —Ç–∞–∫–∏—Ö —Å—Ç–∏–ª—è—Ö:
{tones_text}

–í–ê–ñ–õ–ò–í–û: –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –ü–û–í–ù–û–Æ —ñ –ö–û–ù–ö–†–ï–¢–ù–û–Æ!

–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ (JSON):
[
  {{
    "tone": "official/friendly/tech_support",
    "text": "–ü–û–í–ù–ò–ô —Ç–µ–∫—Å—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≤—ñ–¥–≥—É–∫ (3-5 —Ä–µ—á–µ–Ω—å)",
    "action_items": ["–¥—ñ—è 1", "–¥—ñ—è 2"],
    "suggested_links": ["–ø–æ—Å–∏–ª–∞–Ω–Ω—è 1"]
  }}
]"""

        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.7,
                response_format={"type": "json_object"}
            )
            
            content = response.choices[0].message.content
            logger.info(f"OpenAI response: {content[:200]}...")  # –õ–æ–≥—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            
            # –ü–∞—Ä—Å–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            result = json.loads(content)
            
            # –Ø–∫—â–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ —Å–ø–∏—Å–æ–∫, –∞ –æ–±'—î–∫—Ç –∑ –∫–ª—é—á–µ–º
            if isinstance(result, dict):
                if "responses" in result:
                    result = result["responses"]
                elif "drafts" in result:
                    result = result["drafts"]
                else:
                    # –ú–æ–∂–ª–∏–≤–æ —Ü–µ –æ–¥–∏–Ω –æ–±'—î–∫—Ç, –æ–±–≥–æ—Ä–Ω–µ–º–æ –≤ —Å–ø–∏—Å–æ–∫
                    result = [result]
            
            drafts = []
            for item in result:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —Ç–µ–∫—Å—Ç
                if not item.get("text") or item.get("text").strip() == "":
                    logger.warning(f"Empty text in response for tone {item.get('tone')}")
                    continue
                
                drafts.append(ResponseDraft(
                    tone=ResponseTone(item.get("tone", "official")),
                    text=item.get("text", ""),
                    action_items=item.get("action_items", []),
                    suggested_links=item.get("suggested_links", [])
                ))
            
            # –Ø–∫—â–æ –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ –∂–æ–¥–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback
            if not drafts:
                logger.error("No valid drafts generated, using fallback")
                return self._get_fallback_responses(comment, brand_name, tones)
            
            return drafts
        
        except Exception as e:
            logger.error(f"Error generating responses: {e}")
            return self._get_fallback_responses(comment, brand_name, tones)
    
    def _get_fallback_responses(self, comment: str, brand_name: str, tones: List[ResponseTone]) -> List[ResponseDraft]:
        """–§–æ–ª–±–µ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —è–∫—â–æ OpenAI –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤"""
        import logging
        logger = logging.getLogger(__name__)
        
        fallback_texts = {
            ResponseTone.OFFICIAL: f"""–î—è–∫—É—î–º–æ –∑–∞ –í–∞—à –≤—ñ–¥–≥—É–∫ –ø—Ä–æ {brand_name}.

–ú–∏ —Ü—ñ–Ω—É—î–º–æ –∫–æ–∂–Ω—É –¥—É–º–∫—É –Ω–∞—à–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —ñ –æ–±–æ–≤'—è–∑–∫–æ–≤–æ —Ä–æ–∑–≥–ª—è–Ω–µ–º–æ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∞—Ü—é—î –Ω–∞–¥ –ø–æ—Å—Ç—ñ–π–Ω–∏–º –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è–º —è–∫–æ—Å—Ç—ñ —Å–µ—Ä–≤—ñ—Å—É.

–Ø–∫—â–æ —É –í–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–∏—Ç–∞–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞—à–æ—é —Å–ª—É–∂–±–æ—é –ø—ñ–¥—Ç—Ä–∏–º–∫–∏.

–ó –ø–æ–≤–∞–≥–æ—é,
–ö–æ–º–∞–Ω–¥–∞ {brand_name}""",
            
            ResponseTone.FRIENDLY: f"""–ü—Ä–∏–≤—ñ—Ç! üëã

–î—è–∫—É—î–º–æ, —â–æ –ø–æ–¥—ñ–ª–∏–ª–∏—Å—è —Å–≤–æ—ó–º–∏ –≤—Ä–∞–∂–µ–Ω–Ω—è–º–∏ –ø—Ä–æ {brand_name}! –¢–≤–æ—è –¥—É–º–∫–∞ –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–∞ –¥–ª—è –Ω–∞—Å.

–ú–∏ –∑–∞–≤–∂–¥–∏ –ø—Ä–∞–≥–Ω–µ–º–æ —Å—Ç–∞—Ç–∏ –∫—Ä–∞—â–∏–º–∏, —Ç–æ–º—É –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤—Ä–∞—Ö—É—î–º–æ —Ç–≤—ñ–π —Ñ—ñ–¥–±–µ–∫. –Ø–∫—â–æ —î —â–µ —è–∫—ñ—Å—å –ø–∏—Ç–∞–Ω–Ω—è —á–∏ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó - –ø–∏—à–∏, –±—É–¥–µ–º–æ —Ä–∞–¥—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏! üòä

–î—è–∫—É—î–º–æ, —â–æ –∑ –Ω–∞–º–∏!""",
            
            ResponseTone.TECH_SUPPORT: f"""–î–æ–±—Ä–æ–≥–æ –¥–Ω—è!

–î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è —â–æ–¥–æ {brand_name}.

–î–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –≤–∞—à–æ—ó –ø—Ä–æ–±–ª–µ–º–∏, –±—É–¥—å –ª–∞—Å–∫–∞:
1. –û–ø–∏—à—ñ—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ñ—à–µ —Å–∏—Ç—É–∞—Ü—ñ—é
2. –í–∫–∞–∂—ñ—Ç—å –≤–µ—Ä—Å—ñ—é –¥–æ–¥–∞—Ç–∫—É/—Å–µ—Ä–≤—ñ—Å—É
3. –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç (—è–∫—â–æ –º–æ–∂–ª–∏–≤–æ)

–ù–∞—à–∞ —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º —É –Ω–∞–π–∫–æ—Ä–æ—Ç—à—ñ —Ç–µ—Ä–º—ñ–Ω–∏.

–û—á—ñ–∫—É—î–º–æ –Ω–∞ –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å."""
        }
        
        drafts = []
        for tone in tones:
            drafts.append(ResponseDraft(
                tone=tone,
                text=fallback_texts.get(tone, fallback_texts[ResponseTone.OFFICIAL]),
                action_items=["–ü–µ—Ä–µ—Å–ª–∞—Ç–∏ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É", "–†–æ–∑–≥–ª—è–Ω—É—Ç–∏ –≤—Ä—É—á–Ω—É"],
                suggested_links=[]
            ))
        
        return drafts
    
    def answer_chat_query(self, query: str, context_data: dict) -> str:
        """–í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø—Ä–æ –±—Ä–µ–Ω–¥"""
        
        system_prompt = """–¢–∏ - AI –∞–Ω–∞–ª—ñ—Ç–∏–∫ —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó –±—Ä–µ–Ω–¥—É. 
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö –ø—Ä–æ –±—Ä–µ–Ω–¥.
–ë—É–¥—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü–∏—Ñ—Ä–∏ —Ç–∞ —Ñ–∞–∫—Ç–∏.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."""

        # –§–æ—Ä–º—É—î–º–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑ –¥–∞–Ω–∏—Ö
        context_summary = f"""
–î–∞–Ω—ñ –ø—Ä–æ –±—Ä–µ–Ω–¥:
- –í—Å—å–æ–≥–æ –∑–≥–∞–¥—É–≤–∞–Ω—å: {context_data.get('total_mentions', 0)}
- –†–æ–∑–ø–æ–¥—ñ–ª –Ω–∞—Å—Ç—Ä–æ—ó–≤: {context_data.get('sentiment_distribution', {})}
- –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—Ä–æ–±–ª–µ–º: {context_data.get('top_categories', [])}
- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∏: {context_data.get('platform_distribution', {})}

–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ:
{context_data.get('relevant_comments', '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö')}

–ë–∞–∑–∞ –∑–Ω–∞–Ω—å:
{context_data.get('knowledge_base', '–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö')}
"""

        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context_summary}\n\n–ó–∞–ø–∏—Ç–∞–Ω–Ω—è: {query}"}
                ],
                temperature=0.5
            )
            
            return response.choices[0].message.content
        
        except Exception as e:
            return f"–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É: {str(e)}"
    
    def analyze_crisis_severity(self, mentions: List[dict]) -> dict:
        """–ê–Ω–∞–ª—ñ–∑—É—î —Å–µ—Ä–π–æ–∑–Ω—ñ—Å—Ç—å –∫—Ä–∏–∑–∏ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é LLM"""
        
        mentions_text = "\n".join([
            f"- [{m.get('platform')}] {m.get('body')[:100]}... (–Ω–∞—Å—Ç—Ä—ñ–π: {m.get('sentiment')})"
            for m in mentions[:20]  # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à—ñ 20
        ])
        
        system_prompt = """–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ –∫—Ä–∏–∑–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó –±—Ä–µ–Ω–¥—É.
–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è —Ç–∞ –≤–∏–∑–Ω–∞—á:
1. –°–µ—Ä–π–æ–∑–Ω—ñ—Å—Ç—å —Å–∏—Ç—É–∞—Ü—ñ—ó (low/medium/high/critical)
2. –û—Å–Ω–æ–≤–Ω—ñ —Ç–µ–º–∏ –ø—Ä–æ–±–ª–µ–º
3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∫–æ–º–∞–Ω–¥–∏

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π JSON."""

        user_prompt = f"""–ê–Ω–∞–ª—ñ–∑ {len(mentions)} –∑–≥–∞–¥—É–≤–∞–Ω—å –±—Ä–µ–Ω–¥—É:

{mentions_text}

–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
{{
  "severity": "low/medium/high/critical",
  "main_topics": ["—Ç–µ–º–∞ 1", "—Ç–µ–º–∞ 2"],
  "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è 1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è 2"],
  "summary": "–∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å —Å–∏—Ç—É–∞—Ü—ñ—ó"
}}"""

        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.3,
                response_format={"type": "json_object"}
            )
            
            return json.loads(response.choices[0].message.content)
        
        except Exception as e:
            return {
                "severity": "medium",
                "main_topics": ["–ù–µ–≤—ñ–¥–æ–º–æ"],
                "recommendations": ["–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Å–∏—Ç—É–∞—Ü—ñ—é –≤—Ä—É—á–Ω—É"],
                "summary": f"–ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ–∑—É: {str(e)}"
            }
    
    def generate_brand_comparison_answer(self, comparisons: List[dict]) -> str:
        """–ì–µ–Ω–µ—Ä—É—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø—Ä–æ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤"""
        
        # –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –∫–æ–∂–µ–Ω –±—Ä–µ–Ω–¥
        brands_data = []
        for comp in comparisons:
            brands_data.append(f"""
**{comp['brand_name']}**:
- –ó–≥–∞–¥—É–≤–∞–Ω—å: {comp['total_mentions']}
- Reputation Score: {comp['reputation_score']}/100
- Sentiment: –ø–æ–∑–∏—Ç–∏–≤ {comp['sentiment_distribution']['positive']}, –Ω–µ–≥–∞—Ç–∏–≤ {comp['sentiment_distribution']['negative']}, –Ω–µ–π—Ç—Ä–∞–ª {comp['sentiment_distribution']['neutral']}
- Severity: critical {comp['severity_distribution']['critical']}, high {comp['severity_distribution']['high']}, medium {comp['severity_distribution']['medium']}, low {comp['severity_distribution']['low']}

–°–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏:
{chr(10).join(['- ' + s for s in comp['top_strengths']])}

–°–ª–∞–±–∫—ñ —Å—Ç–æ—Ä–æ–Ω–∏:
{chr(10).join(['- ' + w for w in comp['top_weaknesses']])}
""")
        
        system_prompt = """–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ –∞–Ω–∞–ª—ñ–∑—É —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó –±—Ä–µ–Ω–¥—ñ–≤.
–ü–æ—Ä—ñ–≤–Ω—è–π –±—Ä–µ–Ω–¥–∏ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞–¥–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö.

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –ø—Ä–æ—Å—Ç–æ—é –º–æ–≤–æ—é, –∑—Ä–æ–∑—É–º—ñ–ª–æ.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
1. –ü–æ—á–Ω–∏ –∑ —á—ñ—Ç–∫–æ–≥–æ –≤–∏—Å–Ω–æ–≤–∫—É: "–Ø–∫–∏–π –±—Ä–µ–Ω–¥ –∫—Ä–∞—â–∏–π —ñ —á–æ–º—É"
2. –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ –∫–ª—é—á–æ–≤–∏—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö (reputation score, sentiment, –∫—Ä–∏—Ç–∏—á–Ω—ñ—Å—Ç—å)
3. –°–∏–ª—å–Ω—ñ —Å—Ç–æ—Ä–æ–Ω–∏ –∫–æ–∂–Ω–æ–≥–æ –±—Ä–µ–Ω–¥—É
4. –°–ª–∞–±–∫—ñ —Å—Ç–æ—Ä–æ–Ω–∏ –∫–æ–∂–Ω–æ–≥–æ –±—Ä–µ–Ω–¥—É
5. –ó–∞–≥–∞–ª—å–Ω–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫ —ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó

–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –µ–º–æ–¥–∂—ñ –¥–ª—è –Ω–∞–æ—á–Ω–æ—Å—Ç—ñ.
–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é."""
        
        user_prompt = f"""–ü–æ—Ä—ñ–≤–Ω—è–π —Ü—ñ –±—Ä–µ–Ω–¥–∏:

{chr(10).join(brands_data)}

–ó—Ä–æ–±–∏ –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ —ñ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è."""
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.7
            )
            
            return response.choices[0].message.content
        
        except Exception as e:
            # Fallback - –ø—Ä–æ—Å—Ç–µ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
            result = "# üìä –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –±—Ä–µ–Ω–¥—ñ–≤\n\n"
            
            # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ reputation score
            sorted_brands = sorted(comparisons, key=lambda x: x['reputation_score'], reverse=True)
            
            result += f"## üèÜ –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {sorted_brands[0]['brand_name']}\n\n"
            result += f"**{sorted_brands[0]['brand_name']}** –º–∞—î –∫—Ä–∞—â—É —Ä–µ–ø—É—Ç–∞—Ü—ñ—é ({sorted_brands[0]['reputation_score']}/100)\n\n"
            
            for brand in sorted_brands:
                result += f"### {brand['brand_name']}\n"
                result += f"- Reputation: {brand['reputation_score']}/100\n"
                result += f"- –ó–≥–∞–¥—É–≤–∞–Ω—å: {brand['total_mentions']}\n\n"
            
            return result

    def analyze_negative_spike(self, negative_comments: List[dict], increase_ratio: float) -> dict:
        """–ê–Ω–∞–ª—ñ–∑ —Å–ø–ª–µ—Å–∫—É –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –∑–≥–∞–¥–æ–∫"""
        
        comments_text = "\n".join([
            f"- [{c.get('platform')}] {c.get('body')[:150]}..."
            for c in negative_comments[:15]
        ])
        
        system_prompt = """–¢–∏ - –µ–∫—Å–ø–µ—Ä—Ç –∑ –∫—Ä–∏–∑–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É —Ä–µ–ø—É—Ç–∞—Ü—ñ—ó.
–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Å–ø–ª–µ—Å–∫ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –∑–≥–∞–¥–æ–∫ —ñ –¥–∞–π:
1. –ö–æ—Ä–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ (2-3 —Ä–µ—á–µ–Ω–Ω—è)
2. –û—Å–Ω–æ–≤–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏
3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –∫–æ–º–∞–Ω–¥–∏

–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π JSON."""
        
        user_prompt = f"""–ó–±—ñ–ª—å—à–µ–Ω–Ω—è –Ω–µ–≥–∞—Ç–∏–≤—É: {increase_ratio:.1f}x

–ù–µ–≥–∞—Ç–∏–≤–Ω—ñ –∑–≥–∞–¥–∫–∏:
{comments_text}

–§–æ—Ä–º–∞—Ç:
{{
  "summary": "–∫–æ—Ä–æ—Ç–∫–µ —Ä–µ–∑—é–º–µ",
  "main_issues": ["–ø—Ä–æ–±–ª–µ–º–∞ 1", "–ø—Ä–æ–±–ª–µ–º–∞ 2"],
  "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è 1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è 2"]
}}"""
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.3,
                response_format={"type": "json_object"}
            )
            
            return json.loads(response.choices[0].message.content)
        
        except Exception as e:
            return {
                "summary": f"–í–∏—è–≤–ª–µ–Ω–æ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –∑–≥–∞–¥–æ–∫ —É {increase_ratio:.1f} —Ä–∞–∑—ñ–≤. –ü–æ—Ç—Ä—ñ–±–Ω–∞ —É–≤–∞–≥–∞.",
                "main_issues": ["–ù–µ–≤—ñ–¥–æ–º–æ"],
                "recommendations": ["–ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤—Ä—É—á–Ω—É"]
            }


# Singleton
openai_service = OpenAIService()
