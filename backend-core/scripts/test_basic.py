"""
–ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –æ—Å–Ω–æ–≤–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π BrandPulse
–ó–∞–ø—É—Å—Ç–∏—Ç–∏: python scripts/test_basic.py
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from datetime import datetime
from app.database import db_manager
from app.analytics import analytics_service


def test_database():
    """–¢–µ—Å—Ç —Ä–æ–±–æ—Ç–∏ –∑ ChromaDB"""
    print("üß™ –¢–µ—Å—Ç 1: ChromaDB")
    print("-" * 60)
    
    # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä
    test_comment = {
        "body": "–¢–µ—Å—Ç–æ–≤–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ä",
        "timestamp": datetime.now(),
        "rating": 5.0,
        "platform": "app_store",
        "sentiment": "positive",
        "llm_description": "–¢–µ—Å—Ç",
        "category": "test"
    }
    
    comment_id = db_manager.add_comment(test_comment)
    print(f"‚úÖ –ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ: {comment_id}")
    
    # –î–æ–¥–∞—î–º–æ —Ç–µ—Å—Ç–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç
    doc_id = db_manager.add_document(
        title="–¢–µ—Å—Ç–æ–≤–∏–π –¥–æ–∫—É–º–µ–Ω—Ç",
        content="–¶–µ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç",
        doc_type="test"
    )
    print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–¥–∞–Ω–æ: {doc_id}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–æ—à—É–∫
    search_results = db_manager.search_comments("—Ç–µ—Å—Ç", n_results=5)
    print(f"‚úÖ –ü–æ—à—É–∫ –ø—Ä–∞—Ü—é—î: –∑–Ω–∞–π–¥–µ–Ω–æ {len(search_results.get('ids', [[]])[0])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤")
    
    print()


def test_analytics():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏"""
    print("üß™ –¢–µ—Å—Ç 2: Analytics Service")
    print("-" * 60)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = analytics_service.get_statistics()
    print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞:")
    print(f"   - –í—Å—å–æ–≥–æ –∑–≥–∞–¥—É–≤–∞–Ω—å: {stats['total_mentions']}")
    print(f"   - –ü–æ–∑–∏—Ç–∏–≤–Ω–∏—Ö: {stats['sentiment_distribution'].get('positive', 0)}")
    print(f"   - –ù–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö: {stats['sentiment_distribution'].get('negative', 0)}")
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ reputation score
    score = analytics_service.calculate_reputation_score()
    print(f"‚úÖ Reputation Score: {score['overall_score']}/100")
    print(f"   - –¢—Ä–µ–Ω–¥: {score['trend']}")
    print(f"   - –†—ñ–≤–µ–Ω—å —Ä–∏–∑–∏–∫—É: {score['risk_level']}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–µ—Ç–µ–∫—Ü—ñ—é –∫—Ä–∏–∑–∏
    crisis = analytics_service.detect_crisis()
    if crisis:
        print(f"‚ö†Ô∏è  –ö—Ä–∏–∑–∞ –≤–∏—è–≤–ª–µ–Ω–∞: {crisis.crisis_level}")
    else:
        print(f"‚úÖ –ö—Ä–∏–∑ –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ")
    
    print()


def test_data_integrity():
    """–¢–µ—Å—Ç —Ü—ñ–ª—ñ—Å–Ω–æ—Å—Ç—ñ –¥–∞–Ω–∏—Ö"""
    print("üß™ –¢–µ—Å—Ç 3: Data Integrity")
    print("-" * 60)
    
    all_comments = db_manager.get_all_comments()
    
    if not all_comments["metadatas"]:
        print("‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –ø–æ—Ä–æ–∂–Ω—è. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: python scripts/generate_test_data.py")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∞–Ω–∏—Ö
    required_fields = ["platform", "sentiment", "timestamp"]
    
    valid_count = 0
    for metadata in all_comments["metadatas"]:
        if all(field in metadata for field in required_fields):
            valid_count += 1
    
    total = len(all_comments["metadatas"])
    print(f"‚úÖ –í–∞–ª—ñ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤: {valid_count}/{total}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º
    platforms = set(m.get("platform") for m in all_comments["metadatas"])
    print(f"‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∏: {', '.join(platforms)}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ sentiment
    sentiments = {}
    for m in all_comments["metadatas"]:
        sent = m.get("sentiment", "unknown")
        sentiments[sent] = sentiments.get(sent, 0) + 1
    
    print(f"‚úÖ –†–æ–∑–ø–æ–¥—ñ–ª sentiment:")
    for sent, count in sentiments.items():
        percentage = (count / total * 100) if total > 0 else 0
        print(f"   - {sent}: {count} ({percentage:.1f}%)")
    
    print()


def main():
    print("\n" + "=" * 60)
    print("BRANDPULSE - BASIC TESTS")
    print("=" * 60 + "\n")
    
    try:
        test_database()
        test_analytics()
        test_data_integrity()
        
        print("=" * 60)
        print("‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ñ —É—Å–ø—ñ—à–Ω–æ!")
        print("=" * 60)
        print("\nüí° –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
        print("   1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä: python app/main.py")
        print("   2. –í—ñ–¥–∫—Ä–∏–π—Ç–µ: http://localhost:8000/docs")
        print("   3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å demo: python scripts/crisis_demo.py")
        
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
