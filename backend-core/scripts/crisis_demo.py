"""
Live Crisis Simulator - –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω—ñ
–°–∏–º—É–ª—é—î —Å–ø–ª–µ—Å–∫ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ
"""
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import time
import requests
from datetime import datetime
import random

API_BASE = "http://localhost:8000"

CRISIS_COMMENTS = [
    "–î–æ–¥–∞—Ç–æ–∫ Zara –∫—Ä–∞—à–∏—Ç—å—Å—è –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –æ–ø–ª–∞—Ç–∏—Ç–∏! –¶–µ –∂–∞—Ö!",
    "–ù–µ –º–æ–∂—É –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –ø–æ–∫—É–ø–∫—É, –ø—Ä–æ–≥—Ä–∞–º–∞ –≤–∏–ª—ñ—Ç–∞—î –ø–æ—Å—Ç—ñ–π–Ω–æ",
    "Payment failure! –ó–∞—Ä–∞–∑ —É–∂–µ 5 —Ä–∞–∑—ñ–≤ –Ω–∞–º–∞–≥–∞–≤—Å—è –æ–ø–ª–∞—Ç–∏—Ç–∏",
    "–¶–µ —Å–∫–∞–º??? –ì—Ä–æ—à—ñ —Å–ø–∏—Å–∞–ª–∏ –∞–ª–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ –ø—Ä–æ–π—à–ª–æ!!!",
    "–î–æ–¥–∞—Ç–æ–∫ –≤–∑–∞–≥–∞–ª—ñ –Ω–µ –ø—Ä–∞—Ü—é—î, –æ–ø–ª–∞—Ç–∞ –∑–∞–≤–∏—Å–∞—î",
    "Broken app! –ú–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≥—Ä–æ—à—ñ?",
    "–ù–ï –ü–†–ê–¶–Æ–Ñ –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –¥–æ–¥–∞—Ç–æ–∫ –≤–∂–µ 2 –≥–æ–¥–∏–Ω–∏!!!",
    "–ö—Ä–∞—à –ø—Ä–∏ checkout, –≤—Ç—Ä–∞—Ç–∏–≤ 30 —Ö–≤–∏–ª–∏–Ω —á–∞—Å—É",
    "Zara –¥–æ–¥–∞—Ç–æ–∫ - –ø–æ–≤–Ω–µ –ª–∞–π–Ω–æ, –Ω–µ –º–æ–∂—É –Ω—ñ—á–æ–≥–æ –∫—É–ø–∏—Ç–∏",
    "REFUND! –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç–∏ –Ω–µ –ø—Ä–∞—Ü—é—î –≤–∑–∞–≥–∞–ª—ñ!",
]


def trigger_crisis():
    """–ì–µ–Ω–µ—Ä—É—î —Å–ø–ª–µ—Å–∫ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤"""
    print("üö® LIVE CRISIS SIMULATION")
    print("=" * 60)
    print("–°—Ü–µ–Ω–∞—Ä—ñ–π: 15 –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –Ω–∞–ø–∏—Å–∞–ª–∏ –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É –∑ –æ–ø–ª–∞—Ç–æ—é")
    print("–î–∏–≤—ñ—Ç—å—Å—è —è–∫ BrandPulse —Ä–µ–∞–≥—É—î –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É —á–∞—Å—ñ...\n")
    
    print("‚è±Ô∏è  –ì–µ–Ω–µ—Ä—É—î–º–æ —Å–ø–ª–µ—Å–∫ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤...")
    
    for i in range(15):
        comment = random.choice(CRISIS_COMMENTS)
        platform = random.choice(["app_store", "google_play", "trustpilot", "reddit"])
        
        data = {
            "body": comment,
            "timestamp": datetime.now().isoformat(),
            "rating": random.uniform(1.0, 2.0),
            "backlink": f"https://{platform}/crisis_comment_{i}",
            "platform": platform,
            "sentiment": "negative",
            "llm_description": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∫–∞—Ä–∂–∏—Ç—å—Å—è –Ω–∞ –∫—Ä–∞—à –¥–æ–¥–∞—Ç–∫—É –ø—Ä–∏ –æ–ø–ª–∞—Ç—ñ",
            "category": "payment_crash"
        }
        
        try:
            response = requests.post(f"{API_BASE}/api/comments", json=data)
            if response.status_code == 200:
                print(f"   ‚úì [{i+1}/15] –î–æ–¥–∞–Ω–æ –∫–æ–º–µ–Ω—Ç–∞—Ä –∑ {platform}")
            else:
                print(f"   ‚úó [{i+1}/15] –ü–æ–º–∏–ª–∫–∞: {response.status_code}")
        except Exception as e:
            print(f"   ‚úó [{i+1}/15] –ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è: {e}")
        
        time.sleep(0.3)  # –ù–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –µ—Ñ–µ–∫—Ç—É
    
    print("\nüîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–µ—Ç–µ–∫—Ü—ñ—é –∫—Ä–∏–∑–∏...")
    time.sleep(1)
    
    try:
        crisis_response = requests.get(f"{API_BASE}/api/crisis/check")
        crisis_data = crisis_response.json()
        
        if crisis_data.get("crisis_detected"):
            alert = crisis_data["alert"]
            print("\nüö® CRISIS DETECTED!")
            print("=" * 60)
            print(f"Crisis Level: {alert['crisis_level'].upper()}")
            print(f"Platform: {alert.get('platform', 'Multiple')}")
            print(f"Affected Count: {alert['affected_count']}")
            print(f"Critical Keywords: {', '.join(alert['critical_keywords'])}")
            print(f"\nDescription: {alert['description']}")
            print("\nüìã Recommendations:")
            for i, rec in enumerate(alert['recommendations'], 1):
                print(f"   {i}. {rec}")
        else:
            print("\n‚úÖ –ö—Ä–∏–∑—É –Ω–µ –≤–∏—è–≤–ª–µ–Ω–æ (–º–æ–∂–ª–∏–≤–æ baseline —â–µ –Ω–µ —Ä–æ–∑—Ä–∞—Ö–æ–≤–∞–Ω–∏–π)")
    
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –∫—Ä–∏–∑–∏: {e}")
    
    print("\nüìä –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    time.sleep(0.5)
    
    try:
        stats_response = requests.get(f"{API_BASE}/api/statistics")
        stats = stats_response.json()
        
        print("\nüìà STATISTICS")
        print("=" * 60)
        print(f"Total Mentions: {stats['total_mentions']}")
        print(f"Average Rating: {stats.get('average_rating', 'N/A')}")
        print(f"\nSentiment Distribution:")
        for sentiment, count in stats['sentiment_distribution'].items():
            percentage = (count / stats['total_mentions'] * 100) if stats['total_mentions'] > 0 else 0
            print(f"   {sentiment.capitalize()}: {count} ({percentage:.1f}%)")
        
        score = stats['reputation_score']
        print(f"\nReputation Score: {score['overall_score']}/100")
        print(f"Trend: {score['trend'].upper()}")
        print(f"Risk Level: {score['risk_level'].upper()}")
        
        if score.get('platform_scores'):
            print("\nPlatform Scores:")
            for platform, pscore in score['platform_scores'].items():
                print(f"   {platform}: {pscore}/100")
    
    except Exception as e:
        print(f"\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    print("\n" + "=" * 60)
    print("‚úÖ Simulation Complete!")
    print("\nüí° –ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:")
    print("   1. –ó–≥–µ–Ω–µ—Ä—É–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ: POST /api/generate-response")
    print("   2. –ó–∞–ø–∏—Ç–∞–π—Ç–µ AI –ø—Ä–æ –ø—Ä–æ–±–ª–µ–º—É: POST /api/chat")
    print("   3. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –¥–∞—à–±–æ—Ä–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


def show_ai_response_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä—É—î –≥–µ–Ω–µ—Ä–∞—Ü—ñ—é –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π AI"""
    print("\nü§ñ AI RESPONSE CO-PILOT DEMO")
    print("=" * 60)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∫–æ–º–µ–Ω—Ç–∞—Ä
    try:
        search_response = requests.get(f"{API_BASE}/api/search/comments?query=payment&limit=1")
        comments = search_response.json()
        
        if comments.get('results') and len(comments['results']) > 0:
            comment = comments['results'][0]
            comment_id = comment['id']
            
            print(f"–ö–æ–º–µ–Ω—Ç–∞—Ä: \"{comment['text'][:100]}...\"")
            print(f"Platform: {comment['platform']}, Sentiment: {comment['sentiment']}\n")
            
            print("–ì–µ–Ω–µ—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É —Ä—ñ–∑–Ω–∏—Ö —Å—Ç–∏–ª—è—Ö...")
            
            response = requests.post(f"{API_BASE}/api/generate-response", json={
                "comment_id": comment_id,
                "tones": ["official", "friendly", "tech_support"],
                "tone_adjustment": 0.6
            })
            
            if response.status_code == 200:
                drafts = response.json()
                
                for draft in drafts:
                    print(f"\n{'='*60}")
                    print(f"TONE: {draft['tone'].upper()}")
                    print(f"{'='*60}")
                    print(f"\n{draft['text']}\n")
                    
                    if draft.get('action_items'):
                        print("Action Items:")
                        for action in draft['action_items']:
                            print(f"   ‚Ä¢ {action}")
                    
                    if draft.get('suggested_links'):
                        print("\nSuggested Links:")
                        for link in draft['suggested_links']:
                            print(f"   ‚Ä¢ {link}")
            else:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π: {response.status_code}")
        else:
            print("–ö–æ–º–µ–Ω—Ç–∞—Ä—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞: {e}")


def chat_demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä—É—î —Ä–æ–±–æ—Ç—É —á–∞—Ç—É"""
    print("\nüí¨ SMART CHAT DEMO")
    print("=" * 60)
    
    questions = [
        "–Ø–∫—ñ –Ω–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ Zara?",
        "–°–∫—ñ–ª—å–∫–∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—Ö –≤—ñ–¥–≥—É–∫—ñ–≤ –ø—Ä–æ –æ–ø–ª–∞—Ç—É?",
        "–Ø–∫—ñ —Å—Ç–∞—Ç—Ç—ñ –≤–∏–¥–∞—î –ø–æ—à—É–∫ –ø—Ä–æ Zara?"
    ]
    
    for question in questions:
        print(f"\n‚ùì {question}")
        print("-" * 60)
        
        try:
            response = requests.post(f"{API_BASE}/api/chat", json={
                "message": question
            })
            
            if response.status_code == 200:
                data = response.json()
                print(f"\n{data['answer']}\n")
                print(f"Sources: {data['sources']['comments_count']} comments, {data['sources']['knowledge_docs_count']} docs")
            else:
                print(f"–ü–æ–º–∏–ª–∫–∞: {response.status_code}")
        
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞: {e}")
        
        time.sleep(1)


if __name__ == "__main__":
    print("\n" + "üéØ" * 30)
    print("BRANDPULSE - LIVE DEMO")
    print("üéØ" * 30 + "\n")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ API
    try:
        health = requests.get(f"{API_BASE}/")
        print(f"‚úÖ API –¥–æ—Å—Ç—É–ø–Ω–∏–π: {health.json()}\n")
    except:
        print("‚ùå API –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π! –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä: python app/main.py")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü—ñ—ó
    trigger_crisis()
    
    # –î–µ–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    time.sleep(2)
    show_ai_response_demo()
    
    # –î–µ–º–æ —á–∞—Ç—É
    time.sleep(2)
    chat_demo()
    
    print("\n" + "=" * 60)
    print("üéâ DEMO –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 60)
